mean(hunger$Numeric[hunger$Year==1970])
abline(lm1)
abline(lm1, lwd=3)
plot(hunger$Year, hunger$Numeric, pch=19)
points(hunger$Year, hunger$Numeric, pch=19, col=((hunger$Sex==Male)*1+1))
points(hunger$Year, hunger$Numeric, pch=19, col=((hunger$Sex=="Male")*1+1))
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
abline(lmM, col="black", lwd=3)
abline(lmF, col="red", lwd=3)
summary(lmM$coef)
lmM$coef
lmF$coef
lmBoth <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
abline(lmBoth, col="blue", lwd=3)
plot(hunger$Year, hunger$Numeric, col=((hunger$Sex=="Male")*1+1))
plot(hunger$Year, hunger$Numeric, col=((hunger$Sex=="Male")*1+1), pch=19)
abline(c(lmBoth$coef[1], lmBoth$coef[2]), col="red", lwd=3)
abline(c(lmBoth$coef[1] + lmBoth$coef[3], lmBoth$coef[2]), col="black", lwd=3)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, data=hunger)
plot(hunger$Year, hunger$Numeric, pch=19, col=hunger$Sex)
abline(lmInter)
abline(c(lmInter$coef[1], lmInter$coef[2]), col="red", lwd=3)
abline(c(lmInter$coef[1] + lmInter$coef[3], lmInter$coef[2] + lmInter$coef[4]), col="green", lwd=3)
summary(lmInter)
n <- 100; t <- rep(c(0,1), c(n/2, n/2)); x <- runif(n); beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x*beta1 + t*tau + rnorm(n, sd=sigma)
plot(x, y, type="n", frame=F)
abline(lm(y~x), lwd=2)
abline(h = mean(y[1:(n/2)]), lwd=3)
abline(h = mean(y[(n/2 + 1):n]), lwd=3)
fit <- lm(y ~ x+t)
abline(coef(fit)[1], coef(fit)[2], lwd=3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd=3)
points(x[1:(n/2)], y[1:(n/2)], pch=19, col="black", bg="lightblue", cex=2)
points(x[(n/2 + 1):n], y[(n/2+1):n], pch=19, col="black", bg="salmon", cex=2)
points(x[1:(n/2)], y[1:(n/2)], pch=21, col="black", bg="lightblue", cex=2)
points(x[(n/2 + 1):n], y[(n/2+1):n], pch=21, col="black", bg="salmon", cex=2)
par(mfrow=c(2,2))
rm(fit)
fit <- lm(Fertility ~ ., data=swiss)
plot(fit)
x1 <- c(10, rnorm(n)); y1 <- c(10, c(rnorm(n)))
fit1 <- lm(y1~x1)
fit
dfbetas(fit[1:10, 2])
dfbetas(fit[1:10, 2], 3)
dfbetas(fit1[1:10, 2], 3)
fit1
fit1[1:10]
dfbetas(fit)
dfbetas(fit1)
dfbetas(fit1)[1:10, 2]
plot(x1, y1)
numsim <- 10000
xx1 <- rnorm(n); xx2 <- rnorm(n); xx3 <- rnorm(n)
betas <- sapply(1:numsim, function(i) {y <- xx1 + rnorm(n, sd=.3); c(coef(lm(y~xx1))[2], coef(lm(y~xx1 + xx2))[2], coef(lm(y~xx1 + xx2 + xx3))[2])})
round(apply(betas, 1, sd), 5)
xx1 <- rnorm(n)
xx2 <- x1/sqrt(2) + rnorm(n)/sqrt(2)
xx2 <- (x1/sqrt(2) + rnorm(n)/sqrt(2))
rm(xx2)
xx2 <- xx1/sqrt(2) + rnorm(n)/sqrt(2)
xx3 <- xx1 * 0.95 + rnorm(n)*sqrt(1-0.95^2)
betas <- sapply(1:numsim, function(i) {y <- xx1 + rnorm(n, sd=.3); c(coef(lm(y~xx1))[2], coef(lm(y~xx1 + xx2))[2], coef(lm(y~xx1 + xx2 + xx3))[2])})
round(apply(betas, 1, sd), 5)
fitswiss <- lm(Fertility~Agriculture, data=swiss)
a <- summary(fitswiss)$cov.unscaled[2,2]
a
fitswiss$cov.unscaled
summary(fitswiss)$cov.unscaled
fitswiss2 <- lm(Fertility~., data=swiss)
vif(fitswiss2)
?vif
??vif
install.packages("car")
library(car)
vif(fitswiss2)
sqrt(vif(fitswiss2))
rm(list=ls())
library(datasets)
data(mtcars)
str(mtcars)
lm1 <- lm(mpg ~ as.factor(cyl)*wt)
lm1 <- lm(mpg ~ as.factor(cyl)*wt, data=mtcars)
summary(lm1)
39.571- -15.703
-5.647 +   3.455
lm2 <- lm(mpg ~ cyl + wt)
lm2 <- lm(mpg ~ cyl + wt, data=mtcars)
summary(lm2)
-3.1910*4
-1.5078*4
plot(mtcars$wt, mtcars$mpg, col=mtcars$cyl)
plot(mtcars$wt, mtcars$mpg, col=mtcars$cyl, pch=19)
abline(lm2)
abline(lm2)[2]
lm2 <- lm(mpg~as.factor(cyl) + wt, data=mtcars)
summary(lm2)
as.factor(mtcars$cyle)
as.factor(mtcars$cyl)
lm2$coef
abline(lm2$coef[c(1, 4)])
lm2$coef[c(1,4)]
summary(lm2)
data(swiss)
lmswiss <- lm(Fertility~., data=swiss)
summary(lmswiss)
cyl2 <- relevel(as.factor(mtcars$cyl, "6"))
cyl2 <- relevel(as.factor(mtcars$cyl), "6")
cyl2
lm3 <- lm(mtcars$mpg ~ cyl2 + mtcars$wt)
summary(lm3)
4.2556 - -1.8153
lm4 <- lm(mpg ~ cyl2, data=mtcars)
summary(lm4)
plot(mtcars$cyl, mtcars$wt, col=mtcars$mpg, pch=19)
lminter <- lm(mpg ~ as.factor(cyl)*wt, data=mtcars)
summary(lminter)
anova(lm2, lminter)
?update
?anova
?lrtest
install.packages("lmtest")
library(lmtest)
?lrtest
lrtest(lm2, lminter)
lmq4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(lmq4)
?mtcars
1/1000*.5
1/2000
lmq4a <- lm(mpg ~ I(wt * 0.5) + relevel(factor(cyl), "6"), data = mtcars)
summary(lmq4a)
?hatvalues
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
lmq5 <- lm(y~x)
hatvalues(lmq5)
rm(x)
rm(y)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
lm(y~x)
lmq6 <- lm(y~x)
dfbetas(lmq6)
data(iris)
library(ggplot2)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=F)
training <- iris[inTrain,]
test <- iris[-inTrain]
test <- iris[-inTrain,]
qplot(Petal.Width, Sepal.Width, color=Species, data=training)
?qplot
?aes
qplot(Petal.Width, Sepal.Width, color=Species, data=training, size=4)
modelFit <- train(Species ~ ., method="rpart", data=training)
modelFit
summary(modelFit)
modelFit
modelFit$finalModel
plot(modelFit$finalModel)
plot(modelFit$finalModel, uniform=T)
plot(modelFit$finalModel, uniform=T, main="Iris Classification Tree")
text(modelFit$finalModel, use.n=T, all=T, cex=0.8)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modelFit$finalModel)
install.packages("rpart")
install.packages("rpart.plot")
fancyRpartPlot(modelFit$finalModel)
preds <- predict(modelFit(test))
preds <- predict(modelFit, newdata=test)
confusionMatrix(preds, test$Species)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=F)
training <- segmentationOriginal[inTrain,]
test <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case~., method="rpart", data=training)
names(training)
modFit
modFit$finalModel
library(rattle)
fancyRpartPlot(modFit$finalModel)
?predict
pred <- predict(modFit$finalModel, test)
pred <- predict(modFit$finalModel, newdata=test)
pred <- predict(modFit, newdata=test)
head(pred)
head(segmentationOriginal)
names(segmentationOriginal)
head(segmentationOriginal$Case)
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- subset(segmentationOriginal, Case=="Train")
test <- subset(segmentationOriginal, Case=="Test")
set.seed(125)
modFit <- train(Class~., method="rpart", data=training)
library(rattle)
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
install.packages("pgmm")
library(pgmm)
install.packages("C:\Users\570815\Downloads\pgmm_1.0.tar.gz", repos=NULL, type="source")
getwd()
install.packages("C:/Users/570815/Downloads/pgmm_1.0.tar.gz", repos=NULL, type="source")
rm(list=ls())
library(pgmm)
data(olive)
olive = olive[,-1]
fit <- train(Area~., method="rpart", data=olive)
predict(fit, newdata = as.data.frame(t(colMeans(olive))))
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
head(olive, 2)
levels(olive$Area)
str(olive)
?any
any(olive$Area%%1!=0)
1.2%%1
rm(list=ls())
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
set.seed(13234)
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(2, 4)
misclass(trainSA$chd, predict(modfit, newdata=trainSA))
missClass(trainSA$chd, predict(modfit, newdata=trainSA))
missClass(testSA$chd, predict(modfit, newdata=testSA))
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
head(vowel.train)
str(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
fit <- train(y~., method="rf", data=vowel.train)
varImp(fit)
varImp(fit$finalModel)
?order
order(varImp(fit$finalModel)$Overall, decreasing=T)
varImp(fit$finalModel)$Overall
sortthese <- varImp(fit$finalModel)$Overall
?varImp
varImp.randomForest(fit)
library(randomForest)
varImp.randomForest(fit)
set.seed(33833)
set.seed(33833)
fit2 <- train(y~., method="rf", importance=TRUE, data=vowel.train)
varImp(fit2)
varImp(fit2$finalModel)
?randomForest
set.seed(33833)
fit3 <- randomForest(y~., data=vowel.train, importance=TRUE, localImp=TRUE)
varImp(fit3)
sort(varImp(fit3))
?sort
?max
maxes <- rep(NA, 10)
maxes
?rownames
maxes <- rbind(rownames(varImp(fit3)), maxes)
maxes
maxes[1]
maxes[1,1]
maxes[1,2]
maxes[2]
maxes[2,1]
for(i in 1:10){maxes[2,i] <- max(varImp(fit3)[i,])}
maxes
install.packages("swirl")
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline, lwd=3, col="red")
summary(regrline)
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(rhs, lhs)
varChild <- var(child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
?est
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes, varEst))
all.equal(varChild, varRes+varEst)
efit <- lm(accel~mag+dist,attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
rm(list=ls())
data(mtcars)
head(mtcars)
plot(cyl, mpg, data=mtcars)
with(mtcars, plot(cyl,mpg, col=am))
with(mtcars, plot(cyl,mpg, color=am))
with(mtcars, plot(cyl,mpg, col="am"))
plot(mtcars$disp, mtcars$mpg, col=mtcars$am, pch=19)
?plot
qplot(mtcars$disp, mtcars$mpg, color=mtcars$am)
plot(mtcars$disp, mtcars$mpg, col=ifelse(mtcars$am==1, "salmon", "steelblue"))
plot(mtcars$disp, mtcars$mpg, col=ifelse(mtcars$am==1, "salmon", "steelblue"), pch=19)
lm1 <- lm(mpg~., data=mtcars)
summary(lm1)
plot(mtcars$cyl, mtcars$mpg, col=ifelse(mtcars$am==1, "salmon", "steelblue"), pch=19)
abline(lm(mpg~cyl, data=subset(mtcars, mtcars$am==1)))
abline(lm(mpg~cyl, data=subset(mtcars, mtcars$am==0)))
names(mtcars)
lmtest <- lm(mpg~am*cyl + am*disp + am*hp + am*drat + am*wt + am*qsec + am*vs + am*gear + am*carb)
lmtest <- lm(mpg~am*cyl + am*disp + am*hp + am*drat + am*wt + am*qsec + am*vs + am*gear + am*carb, data=mtcars)
summary(lmtest)
?pairs
pairs(mtcars)
pairs(mtcars[,-mtcars$am], panel=panel.smooth)
?subset
pairs(mtcars[,!mtcars$am], panel=panel.smooth)
pairs(mtcars[, !names(mtcars %in% c("am"))], panel=panel.smooth)
names(mtcars)
pairs(mtcars[,-9], panel=panel.smooth)
pairs(mtcars[,-9], panel=panel.smooth, col=am)
pairs(mtcars[,-9], panel=panel.smooth, col=mtcars$am)
pairs(mtcars[,-9], panel=panel.smooth, col=ifelse(mtcars$am==1, "salmon", "steelblue"), pch=19)
plot(mtcars$am, mtcars$mpg, pch=19, col=ifelse(mtcars$am==1, "salmon", "steelblue"))
lmobvious <- lm(mpg~am, data=mtcars)
summary(lmobvious)
abline(lmobvious)
abline(lmobvious, lwd=3)
abline(lmobvious, lwd=2)
pairs(mtcars, panel=panel.smooth, col=ifelse(mtcars$am==1, "salmon", "steelblue"), pch=19)
lmobvious$coef
summary(lmobvious$coef)
summary(lmobvious)
lmobvious
?summary
summary(lm$coefficients)
summary(lmobvious$coefficients)
lmobvious$coefficients
summary(lmobvious)$coefficients
?mtcars
?knit2pdf
library(knitr)
?knit2pdf
getwd()
knit2pdf("C:/Users/570815/Dropbox/Coursera/R Working Directory/MotorTrendAnalyses/finalAnalysis.Rmd", "C:/Users/570815/Dropbox/Coursera/R Working Directory/MotorTrendAnalyses/")
knit2pdf("C:/Users/570815/Dropbox/Coursera/R Working Directory/MotorTrendAnalyses/finalAnalysis.Rmd", "C:/Users/570815/Dropbox/Coursera/R Working Directory/MotorTrendAnalyses/MTtestPDF.pdf")
1806*1807
summary(lmobvious)$coefficients
?plot
?legend
plot(mtcars$am, mtcars$mpg, pch=19, col=ifelse(mtcars$am==1, "salmon", "steelblue"), xlab="Transmission Type", ylab="Miles per Gallon", main="MPG by Transmission Type", legend=legend("topright", mtcars$am))
plot(mtcars$am, mtcars$mpg, pch=19, col=ifelse(mtcars$am==1, "salmon", "steelblue"), xlab="Transmission Type", ylab="Miles per Gallon", main="MPG by Transmission Type")
legend("topright", mtcars$am))
legend("topleft", mtcars$am)
legend("topleft", legend=mtcars$am)
plot(mtcars$am, mtcars$mpg, pch=19, col=ifelse(mtcars$am==1, "salmon", "steelblue"), xlab="Transmission Type", ylab="Miles per Gallon", main="MPG by Transmission Type")
legend("topleft", col=c("steelblue", "salmon"), legend=c("Automatic", "Manual"))
?legend
plot(mtcars$am, mtcars$mpg, pch=19, col=ifelse(mtcars$am==1, "salmon", "steelblue"), xlab="Transmission Type", ylab="Miles per Gallon", main="MPG by Transmission Type")
legend("topleft", fill=c("steelblue", "salmon"), legend=c("Automatic", "Manual"))
plot(mtcars$am, mtcars$mpg, pch=19, col=ifelse(mtcars$am==1, "salmon", "steelblue"), xlab="Transmission Type", ylab="Miles per Gallon", main="MPG by Transmission Type")
legend("topleft", fill=c("steelblue", "salmon"), legend=c("Automatic", "Manual"))
lmobvious <- lm(mpg~am, data=mtcars)
abline(lmobvious, lwd=2)
?mtcars
summary(lm(mpg~., data=mtcars))
summary(lm(mpg~disp + drat + gear + carb + qsec + cyl, data=mtcars)
)
summary(lm(mpg~carb + disp, data=mtcars))
str(mtcars)
testcopy <- mtcars
testcopy$am <- as.factor(testcopy$am)
summary(lm(mpg~am, data=mtcars))
summary(lm(mpg~., data=mtcars))
summary(lm(mpg~., data=testcopy))
summary(lm(mpg~disp*am, data=testcopy))
summary(lm(mpg~disp, data=testcopy))
summary(lm(mpg~disp*am + cyl*am, data=testcopy))
summary(lm(mpg~disp*am + carb*am, data=testcopy))
lmex <- lm(mpg~cyl + disp + drat + qsec + gear + carb)
lmex <- lm(mpg~cyl + disp + drat + qsec + gear + carb, data=mtcars)
summary(lmex)
lmex2 <- lm(mpg~carb + disp + gear + drat + qsec + cyl)
lmex2 <- lm(mpg~carb + disp + gear + drat + qsec + cyl, data=mtcars)
summary(lmex2)
rm(lmex2)
lmex2 <- lm(mpg~carb + disp + gear + drat, data=mtcars)
summary(lmex2)
lmex3 <- lm(mpg~carb + disp + gear, data=mtcars)
summary(lmex3)
testfit1 <- lm(mpg~carb + disp + gear, data=mtcars)
testfit2 <- lm(mpg~carb + disp + gear + drat, data=mtcars)
testfit3 <- lm(mpg~carb + disp + gear + drat + qsec, data=mtcars)
anova(testfit1, testfit2, testfit3)
summary(lmex)$coefficients
lmex2 <- lm(mpg~carb + disp + gear + drat, data=mtcars)
summary(lmex2)$coefficients
finMod <- lm(mpg~ am*carb + am*disp + am*gear, data=mtcars)
summary(finMod)
summary(finMod)$coefficients
plot(mtcars$disp, mtcars$mpg, pch=19, col=ifelse(mtcars$am==1, "salmon", "steelblue"))
testlm <- lm(mpg~disp, data=mtcars)
summary(testlm)
testlm2 <- lm(mpg~disp*am, data=mtcars)
summary(testlm2)
?knit2pdf
summary(finMod)$coefficients
summary(finMod)
summary(lm(mpg~am*carb + am*disp, data=mtcars))
-2.1+0.9
5*.4
plot(mtcars$disp, mtcars$mpg, pch=19, col=ifelse(mtcars$am==1, "salmon", "steelblue"))
plot(mtcars$disp, mtcars$mpg, pch=19, col=ifelse(mtcars$am==1, "salmon", "steelblue"), main="MPG by Engine Displacement and Transmission Type", xlab="Displacement", ylab="MPG")
abline(lm(mpg~cyl, data=subset(mtcars, mtcars$am==1)), col="red", lwd=2)
abline(lm(mpg~cyl, data=subset(mtcars, mtcars$am==0)), col="blue", lwd=2)
legend("topleft", fill=c("steelblue", "salmon"), legend=c("Automatic", "Manual"))
plot(mtcars$disp, mtcars$mpg, pch=19, col=ifelse(mtcars$am==1, "salmon", "steelblue"), main="MPG by Engine Displacement and Transmission Type", xlab="Displacement", ylab="MPG")
abline(lm(mpg~cyl, data=subset(mtcars, mtcars$am==1)), col="red", lwd=2)
abline(lm(mpg~cyl, data=subset(mtcars, mtcars$am==0)), col="blue", lwd=2)
legend("topright", fill=c("steelblue", "salmon"), legend=c("Automatic", "Manual"))
plot(mtcars$disp, mtcars$mpg, pch=19, col=ifelse(mtcars$am==1, "salmon", "steelblue"), main="MPG by Engine Displacement and Transmission Type", xlab="Displacement", ylab="MPG")
abline(lm(mpg~cyl, data=subset(mtcars, mtcars$am==1)), col="red", lwd=2)
abline(lm(mpg~cyl, data=subset(mtcars, mtcars$am==0)), col="blue", lwd=2)
legend("topright", fill=c("steelblue", "salmon"), legend=c("Automatic", "Manual"))
plot(mtcars$disp, mtcars$mpg, pch=19, col=ifelse(mtcars$am==1, "salmon", "steelblue"), main="MPG by Engine Displacement and Transmission Type", xlab="Displacement", ylab="MPG")
abline(lm(mpg~disp, data=subset(mtcars, mtcars$am==1)), col="red", lwd=2)
abline(lm(mpg~disp, data=subset(mtcars, mtcars$am==0)), col="blue", lwd=2)
legend("topright", fill=c("steelblue", "salmon"), legend=c("Automatic", "Manual"))
plot(mtcars$disp, mtcars$mpg, pch=19, col=ifelse(mtcars$am==1, "salmon", "steelblue"), main="MPG by Engine Displacement and Transmission Type", xlab="Displacement", ylab="MPG")
abline(lm(mpg~disp, data=subset(mtcars, mtcars$am==1)), col="red", lwd=2)
abline(lm(mpg~disp, data=subset(mtcars, mtcars$am==0)), col="blue", lwd=2)
legend("topright", fill=c("steelblue", "salmon"), legend=c("Automatic", "Manual"))
summary(lm(mpg~am, data=mtcars))
?qt
qt(.95, 30)
1.697261*1.764
7.245 - qt(.95, 30)*1.764; 7.245 + qt(.95, 30)*1.764
plot(resid(lm(mpg~am*disp, data=mtcars)))
plot(resid(lm(mpg~am, data=mtcars)))
plot(resid(lm(mpg~am*carb + am*disp + am*gear , data=mtcars)))
?plot
par(mfrow=c(1,3))
plot(resid(lm(mpg~am, data=mtcars)), main="Residual Plot: MPG by Transmission Type", ylab="Residuals")
plot(resid(lm(mpg~am*carb + am*disp + am*gear, data=mtcars)), main="Residual Plot: Final Winnowed Model", ylab="Residuals")
plot(resid(lm(mpg~am*disp, data=mtcars)), main="Residual Plot: MPG by Displacement interacted with Transmission Type", ylab="Residuals")
par(mfrow=c(1,3))
plot(resid(lm(mpg~am, data=mtcars)), main="MPG by Transmission Type", ylab="Residuals")
plot(resid(lm(mpg~am*carb + am*disp + am*gear, data=mtcars)), main="Final Winnowed Model", ylab="Residuals")
plot(resid(lm(mpg~am*disp, data=mtcars)), main="MPG by Displacement\n with Transmission Interaction", ylab="Residuals")
?par
par()$mar
date()
setwd("C:/Users/570815/Dropbox/Coursera/R Working Directory/WLmachineLearning")
?download.file
trainingDataURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testDataURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if(!file.exists("./data")) {dir.create("./data")}
download.file(trainingDataURL, destfile="./data/WLtrainingData.csv")
download.file(testDataURL, destfile="./data/WLtestData.csv")
training <- read.csv("./data/WLtrainingData.csv")
test <- read.csv("./data/WLtestData.csv")
head(training)
dim(training); dim(test)
str(training)
str(training$classe)
?train
library(caret)
?train
set.seed(256)
fitNB <- train(classe~., data=training, method="nb", trControl=trainControl(method="cv"))
fitNB <- train(classe~., data=training, method="nb")
fitNB <- train(classe~., data=training, method="nb")
fitRF <- train(classe~., data=training, method="rf")
args(preProcess)
preProcess
preProcess()$args
summary(args(preProcess))
?model.matrix
test <- model.matrix(classe~., data=training)
head(test, 1)
19622*160
dim(test)
dim(training)
install.packages("earth")
library(earth)
data(etitanic)
head(etitanic)
str(training)
